package jp.ddhost.ofb_core;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

/// ファイルの最終更新日を管理するクラス
class lastModifiedManager{

	//ファイル群の最終更新日情報
	ArrayList<modifyInfo> modifiedInfoList = new ArrayList<modifyInfo>();


	// コンストラクタ
	lastModifiedManager(){
		loadFile();
	}




	// ファイルをロードする。
	private void loadFile(){
		try{

			// オープン
			File file = new File("lastmodified.txt");
			BufferedReader br = new BufferedReader(new FileReader(file));


			//行ごとに最終更新日情報を読み込み
			String tmpBuffer = br.readLine();
			String filePath = "";
			String lastModified="";
			int separatorPoint = 0;
			modifyInfo myModifyInfo;
			while(tmpBuffer != null){
				separatorPoint = tmpBuffer.indexOf(' ');
				if(separatorPoint == -1){
					return;
				}

				filePath = tmpBuffer.substring(0,separatorPoint);
				lastModified = tmpBuffer.substring(separatorPoint+1);

				myModifyInfo = new modifyInfo();
				myModifyInfo.filePath = filePath;
				myModifyInfo.lastModified = Long.valueOf(lastModified);
				modifiedInfoList.add(myModifyInfo);



				tmpBuffer = br.readLine();
			}


			// クローズ
			  br.close();

		}catch(FileNotFoundException e){
		  System.out.println(e);
		}catch(IOException e){
		  System.out.println(e);
		}
	}




	public void saveLastModified(File sourceFile){

		try {
			modifyInfo myModifyInfo = new modifyInfo();
			myModifyInfo.lastModified = sourceFile.lastModified();


			myModifyInfo.filePath = sourceFile.getCanonicalPath();

			modifiedInfoList.add(myModifyInfo);

			System.out.println("REGIST MODIFIED:"+myModifyInfo.filePath + " " + myModifyInfo.lastModified);
			System.out.println("NUM registered:"+modifiedInfoList.size());


		} catch (IOException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}

	}



	// 登録されていたファイルの最終更新日を返す。
	public long getLastModified(File sourceFile){
		try {
			String myFilePath = sourceFile.getCanonicalPath();

			modifyInfo anInfo;
			String anFilePath;
			for(int i=0;i<modifiedInfoList.size();i++){
				anInfo = modifiedInfoList.get(i);
				anFilePath = anInfo.filePath;

				if(myFilePath.equals(anFilePath)){
					return anInfo.lastModified;
				}
			}


		} catch (IOException e) {
			e.printStackTrace();
		}

		return -1;
	}




	// ファイルに保存する。
	public void close(){
		try{
			System.out.println("------SAVE------");
			for(int i=0;i<modifiedInfoList.size();i++){

				System.out.println(modifiedInfoList.get(i).filePath);
				System.out.println(modifiedInfoList.get(i).lastModified);
			}




		    File file = new File("lastmodified.txt");

		    BufferedWriter bw = new BufferedWriter(new FileWriter(file));


		    String line = "";
		    modifyInfo myMI;
		    for(int i=0;i<modifiedInfoList.size();i++){
		    	myMI = modifiedInfoList.get(i);
		    	line = myMI.filePath+" " + myMI.lastModified;

		    	bw.write(line);
		    	bw.newLine();
		    }

		    bw.close();
		}catch(IOException e){
			System.out.println(e);
		}
	}


}