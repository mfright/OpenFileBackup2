package jp.ddhost.ofb_core;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ofb_core{

	content myContent;

	public static void main(String[] args){
		ofb_core myOFB = new ofb_core();
		myOFB.backup();
	}

	/// MAIN method.
	private void backup(){
		myContent = xmlLoader.loadXml();
		printf("Copy target:"+myContent.source);
		printf("Copy destination:"+myContent.destination);
		printf("Deleted files will be stored in:"+myContent.deleted+"\r\n");

		search1(new File(myContent.source));
	}


	/// 1.ソースフォルダ内のすべてのファイルに対して、バックアップ先へのコピーを試みる
	private void search1(File sourceDir){
		File[] includedFiles = sourceDir.listFiles();

		if( includedFiles == null ){
			return;
		}

		for( File file : includedFiles ) {
			if( !file.exists() )
				continue;
			else if( file.isDirectory() ){
		        search1( file );
			}else if( file.isFile() ){
		        compare( file );
		    }

		}
	}


	private void compare(File sourceFile){
		try {
			String sourceFilePath = sourceFile.getCanonicalPath();

			String destFilePath = myContent.destination+"\\"+sourceFilePath.substring(myContent.source.length());
			File destFile = new File(destFilePath);

			String deletedFilePath="";
			File deletedFile=null;
			if(!myContent.deleted.equals("false")){
		        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		        Date date = new Date();
		        String dateTimeOffset = "_"+sdf.format( date ).toString();

				deletedFilePath = myContent.deleted+"\\"+sourceFilePath.substring(myContent.source.length());
				deletedFilePath = deletedFilePath.substring(0,deletedFilePath.length()-4)+dateTimeOffset+deletedFilePath.substring(deletedFilePath.length()-4);
				deletedFile = new File(deletedFilePath);
			}



			if(destFile.exists()){
				Long sourceLastModified = sourceFile.lastModified();
				Long destLastModified = destFile.lastModified();

				if(sourceLastModified.equals(destLastModified)){
					printf("No_change:"+sourceFilePath);
					return;

				}else if(deletedFile != null){
					printf("COPY:"+destFilePath + " > "+deletedFilePath);
					Files.copy(destFile.toPath(), deletedFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
				}

			}



			printf("COPY:"+sourceFilePath + " > "+destFilePath);

			Files.copy(sourceFile.toPath(),destFile.toPath(),StandardCopyOption.REPLACE_EXISTING);


		} catch (IOException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}
	}






	/// System.out.println
	private void printf(String message){
		System.out.println(message);
	}
}